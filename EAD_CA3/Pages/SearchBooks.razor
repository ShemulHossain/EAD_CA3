@using EAD_CA3.Services
@page "/search-books"
@inject EAD_CA3.Services.OpenLibraryService OpenLibraryService

<div class="search-books-container">
    <h2>Search Books</h2>
    <div class="search-bar">
        <input @bind="searchQuery" @bind:event="oninput" @onkeydown="HandleKeyDown" placeholder="Enter book title or author" class="search-input" />
        <button @onclick="PerformSearch" class="search-button">Search</button>
    </div>


    @if (isLoading)
    {
        <Spinner />
    }
    else if (pagedBooks != null && pagedBooks.Any())
    {
        <ul class="book-list">
            @foreach (var book in pagedBooks)
            {
                <li class="book-item">
                    <a href="book-details/@Uri.EscapeDataString(book.Key)?authors=@Uri.EscapeDataString(string.Join(",", book.AuthorName ?? new string[] { "Unknown Author" }))">
                        @book.Title
                    </a>
                    <p><small>@string.Join(", ", book.AuthorName ?? new string[] { "Unknown Author" })</small></p>
                </li>
            }
        </ul>
        <div class="pagination">
            <button @onclick="PreviousPage" disabled="@isFirstPage" class="pagination-button">Previous</button>
            <span>Page @currentPage of @totalPages</span>
            <button @onclick="NextPage" disabled="@isLastPage" class="pagination-button">Next</button>
        </div>
    }
    else if (hasSearched && !string.IsNullOrWhiteSpace(searchQuery))
    {
        <p class="no-results">No results found for "@searchQuery".</p>
    }
</div>

<style>
    /* Container Styling */
    .search-books-container {
        padding: 20px;
        max-width: 800px;
        margin: 0 auto;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    h2 {
        text-align: center;
        color: #2c3e50;
        margin-bottom: 20px;
    }

    /* Search Bar */
    .search-bar {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 20px;
    }

    .search-input {
        flex: 1;
        padding: 10px;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .search-button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .search-button:hover {
        background-color: #0056b3;
    }

    /* Book List */
    .book-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .book-item {
        background: white;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 10px;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .book-item:hover {
        transform: scale(1.02);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .book-item a {
        font-size: 1.2rem;
        color: #007bff;
        text-decoration: none;
    }

    .book-item a:hover {
        color: #0056b3;
    }

    .book-item p {
        margin: 5px 0 0;
        color: #555;
        font-size: 0.9rem;
    }

    /* Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 20px;
    }

    .pagination-button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .pagination-button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }

    .pagination-button:hover:enabled {
        background-color: #0056b3;
    }

    /* No Results */
    .no-results {
        text-align: center;
        color: #999;
        font-size: 1.1rem;
    }
</style>

@code {
    private string searchQuery = string.Empty;
    private bool isLoading = false;
    private List<Doc> books = new List<Doc>();
    private bool hasSearched = false; // Tracks if a search has been performed
    private List<Doc> pagedBooks = new List<Doc>();
    private int currentPage = 1;
    private int totalPages = 1;
    private const int PageSize = 10;

    private bool isFirstPage => currentPage == 1;
    private bool isLastPage => currentPage == totalPages;

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery)) return;

        isLoading = true;
        hasSearched = true; // Mark that a search has been performed
        try
        {
            var result = await OpenLibraryService.SearchBooksAsync(searchQuery, currentPage);
            books = result?.Docs?.ToList() ?? new List<Doc>();

            // Calculate total pages and initialize to the first page
            totalPages = (int)Math.Ceiling((double)books.Count / PageSize);
            currentPage = 1;
            UpdatePagedBooks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        isLoading = false;
    }

    private void UpdatePagedBooks()
    {
        // Get the items for the current page
        pagedBooks = books
            .Skip((currentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (!isLastPage)
        {
            currentPage++;
            UpdatePagedBooks();
        }
    }

    private void PreviousPage()
    {
        if (!isFirstPage)
        {
            currentPage--;
            UpdatePagedBooks();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await PerformSearch();
        }
    }
}
